#include "sys.h"
#include "usart.h"
#include "oled.h"

void USART1_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;
    //① 串口时钟使能， GPIO 时钟使能，复用时钟使能
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOC | \
            RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);// 使能 USART1 GPIO 时钟
    //② 串口复位
    USART_DeInit(USART1); //复位串口 1
    //③ GPIO 端口模式设置
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12; //USART1_TX PC.12
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; //USART1_RX PD.2
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; //浮空输入
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    //④串口参数初始化
    USART_InitStructure.USART_BaudRate = 9600; //波特率 设置
    USART_InitStructure.USART_WordLength = USART_WordLength_8b; //字长为 8 位
    USART_InitStructure.USART_StopBits = USART_StopBits_1; //一个停止位
    USART_InitStructure.USART_Parity = USART_Parity_No; //无奇偶校验位
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; //无硬件数据流控制
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;// 收发模式
    USART_Init(USART1, &USART_InitStructure); //初始化串口
    #if EN_USART1_RX 
    //⑤ 初始化 NVIC
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ; //抢占优先级 3
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3; //子优先级 3
    NVIC_InitStruc ture.NVIC_IRQChannelCmd = ENABLE; //IRQ 通道使能
    NVIC_Init(&NVIC_InitStructure); //中断优先级初始化
    //⑤开启中断
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //开启中断
    #endif /* EN_USART1_RX */
    USART_Cmd(USART1, ENABLE); 
}

void USART1_Interact(int16_t num)
{

    USART_SendData(USART1, num);
    OLED_ShowString(25, 25, "1...");
    while(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET)
    {
        //OLED_Clear();
        OLED_ShowString(25, 25, "1waiting...");
        OLED_RefreshGram();
    }
    /*
    USART1 -> DR = num;
    while(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET)
    {
        //OLED_Clear();
        OLED_ShowString(25, 25, "nwaiting...");
        OLED_RefreshGram();
    }
    printf("This is a test text for printf function!!\nMy lucky number is %d, yes?\n", num);
    while(USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET)
    {
        //OLED_Clear();
        OLED_ShowString(25, 25, "3waiting...");
        OLED_RefreshGram();
    }
    while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET)
    {
        //OLED_Clear();
        OLED_ShowString(25, 25, "4say something...");
        OLED_RefreshGram();
    }
    OLED_Clear();
    OLED_ShowNumber(25, 25, USART1 -> DR, 2, 12);
    OLED_ShowNumber(25, 30, USART_GetFlagStatus(USART1, USART_FLAG_RXNE), 2, 12);
    OLED_RefreshGram();
    */
}


/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  * @see https://bbs.21ic.com/icview-3071492-1-1.html
  */
PUTCHAR_PROTOTYPE
{  
  USART_SendData(USART_PRINT, ch);
  while(USART_GetFlagStatus(USART_PRINT, USART_FLAG_TC) == RESET);   
  return ch;
}